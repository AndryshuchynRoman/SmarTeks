import telebot
import json
import pandas as pd
import os
from datetime import datetime, timedelta
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

TOKEN = "7608615654:AAF6KDnMrZILIRbosDeV5yxg4YtUT103Uxg"
bot = telebot.TeleBot(TOKEN)

order_data = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—É—Ä'—î—Ä—ñ–≤
def load_couriers():
    global couriers
    try:
        with open("couriers.json", "r", encoding="utf-8") as file:
            couriers = json.load(file)
    except FileNotFoundError:
        couriers = []

load_couriers()

# –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç —Ç–∞ —Ä–∞–π–æ–Ω—ñ–≤
districts = {
    "–õ—å–≤—ñ–≤": ["–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π", "–°–∏—Ö—ñ–≤—Å—å–∫–∏–π", "–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π", "–ì–∞–ª–∏—Ü—å–∫–∏–π", "–õ–∏—á–∞–∫—ñ–≤—Å—å–∫–∏–π", "–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π"],
    "–ö–∏—ó–≤": ["–î–∞—Ä–Ω–∏—Ü—å–∫–∏–π", "–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π", "–û–±–æ–ª–æ–Ω—Å—å–∫–∏–π"],
    "–û–¥–µ—Å–∞": ["–ü—Ä–∏–º–æ—Ä—Å—å–∫–∏–π", "–ö–∏—ó–≤—Å—å–∫–∏–π", "–°—É–≤–æ—Ä—ñ–≤—Å—å–∫–∏–π"]
}

@bot.message_handler(commands=['start'])
def start_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    order_button = KeyboardButton("üöö –ó–∞–º–æ–≤–∏—Ç–∏ –∫—É—Ä'—î—Ä–∞")
    markup.add(order_button)
    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üöö –ó–∞–º–æ–≤–∏—Ç–∏ –∫—É—Ä'—î—Ä–∞")
def start_order(message):
    chat_id = message.chat.id
    order_data.pop(chat_id, None)  # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö
    order_data[chat_id] = {"step": "from_city", "details": {}, "chat_id": chat_id}

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for city in districts.keys():
        markup.add(KeyboardButton(city))

    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ *–∑–≤—ñ–¥–∫–∏* –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –ø–æ—Å–∏–ª–∫–∞:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.chat.id in order_data)
def collect_order_info(message):
    chat_id = message.chat.id
    step = order_data[chat_id]["step"]

    print(f"üîÑ –ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫: {step}")

    if step == "from_city":
        if message.text in districts:
            order_data[chat_id]["details"]["–ú—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞"] = message.text
            order_data[chat_id]["step"] = "from_district"
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            for district in districts[message.text]:
                markup.add(KeyboardButton(district))
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω *–∑–≤—ñ–¥–∫–∏* –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –ø–æ—Å–∏–ª–∫–∞:", reply_markup=markup)
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ! –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")

    elif step == "from_district":
        if message.text in districts[order_data[chat_id]["details"]["–ú—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞"]]:
            order_data[chat_id]["details"]["–†–∞–π–æ–Ω –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞"] = message.text
            order_data[chat_id]["step"] = "from_street"
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ *–∑–≤—ñ–¥–∫–∏* –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –ø–æ—Å–∏–ª–∫–∞:", reply_markup=ReplyKeyboardRemove())
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω! –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")

    elif step == "from_street":
        order_data[chat_id]["details"]["–í—É–ª–∏—Ü—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞"] = message.text
        order_data[chat_id]["step"] = "sender_phone"
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        share_contact_button = KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        markup.add(share_contact_button)
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def handle_sender_contact(message):
    chat_id = message.chat.id
    if chat_id in order_data and order_data[chat_id]["step"] == "sender_phone":
        order_data[chat_id]["details"]["–¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞"] = message.contact.phone_number
        order_data[chat_id]["step"] = "to_city"
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        for city in districts.keys():
            markup.add(KeyboardButton(city))
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ *–∫—É–¥–∏* –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –ø–æ—Å–∏–ª–∫–∞:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.chat.id in order_data)
def collect_recipient_info(message):
    chat_id = message.chat.id
    step = order_data[chat_id]["step"]

    if step == "to_city":
        if message.text in districts:
            order_data[chat_id]["details"]["–ú—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞"] = message.text
            order_data[chat_id]["step"] = "recipient_name"
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ! –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")

    elif step == "recipient_name":
        order_data[chat_id]["details"]["–Ü–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞"] = message.text
        order_data[chat_id]["step"] = "recipient_street"
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:")

    elif step == "recipient_street":
        order_data[chat_id]["details"]["–í—É–ª–∏—Ü—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞"] = message.text
        order_data[chat_id]["step"] = "recipient_phone"
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        share_contact_button = KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        markup.add(share_contact_button)
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

def finalize_order(chat_id):
    details = order_data[chat_id]["details"]
    bot.send_message(chat_id, f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\nüìå –î–µ—Ç–∞–ª—ñ:\n{json.dumps(details, indent=4, ensure_ascii=False)}")

bot.polling(timeout=30, long_polling_timeout=30)